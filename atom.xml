<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>孤独撒满星空</title>
  
  
  <link href="http://sheepelectronic.github.io/atom.xml" rel="self"/>
  
  <link href="http://sheepelectronic.github.io/"/>
  <updated>2022-10-27T01:43:39.584Z</updated>
  <id>http://sheepelectronic.github.io/</id>
  
  <author>
    <name>sdd</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>正则</title>
    <link href="http://sheepelectronic.github.io/post/73169f18.html"/>
    <id>http://sheepelectronic.github.io/post/73169f18.html</id>
    <published>2022-10-26T03:14:23.000Z</published>
    <updated>2022-10-27T01:43:39.584Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-点"><a href="#1-点" class="headerlink" title="1. 点."></a>1. 点.</h1><p>匹配一个任意字符，不匹配转行符</p><p>以下述为例</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">str1 = <span class="string">"""</span></span><br><span class="line"><span class="string">苹果，是红色的</span></span><br><span class="line"><span class="string">梨子，是黄色的</span></span><br><span class="line"><span class="string">橙子，是橘色的</span></span><br><span class="line"><span class="string">香蕉，是色</span></span><br><span class="line"><span class="string">菠萝，</span></span><br><span class="line"><span class="string">"""</span></span><br></pre></td></tr></tbody></table></figure><p>我们有点来匹配颜色</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a = re.<span class="built_in">compile</span>(<span class="string">".色"</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span> a.findall(str1):</span><br><span class="line">    <span class="built_in">print</span>(i)</span><br></pre></td></tr></tbody></table></figure><p>运行结果：</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">红色</span><br><span class="line">黄色</span><br><span class="line">橘色</span><br><span class="line">是色</span><br></pre></td></tr></tbody></table></figure><h1 id="2-星号"><a href="#2-星号" class="headerlink" title="2.星号*"></a>2.星号*</h1><p>匹配任意次数的字符</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">str2 = <span class="string">"rb, rob, roob, rooobbb, roooooooooobbbb"</span></span><br><span class="line">b = re.<span class="built_in">compile</span>(<span class="string">"ro*b"</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> b.findall(str2):</span><br><span class="line">    <span class="built_in">print</span>(i)</span><br></pre></td></tr></tbody></table></figure><p>运行结果</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">rb</span><br><span class="line">rob</span><br><span class="line">roob</span><br><span class="line">rooob</span><br><span class="line">roooooooooob</span><br></pre></td></tr></tbody></table></figure><h1 id="3-加号"><a href="#3-加号" class="headerlink" title="3.加号+"></a>3.加号+</h1><p>匹配至少有一个字符</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">str2 = <span class="string">"rb, rob, roob, rooobbb, roooooooooobbbb"</span></span><br><span class="line">c = re.<span class="built_in">compile</span>(<span class="string">"ro+b"</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> c.findall(str2):</span><br><span class="line">    <span class="built_in">print</span>(i)</span><br></pre></td></tr></tbody></table></figure><p>运行结果：</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">rob</span><br><span class="line">roob</span><br><span class="line">rooob</span><br><span class="line">roooooooooob</span><br></pre></td></tr></tbody></table></figure><h1 id="4-组合技-and"><a href="#4-组合技-and" class="headerlink" title="4.组合技  .+  and .*"></a>4.组合技  .+  and .*</h1><h3 id="①"><a href="#①" class="headerlink" title="①   .*"></a>①   .*</h3><p>.与*连用，匹配出现任意次数的任意字符（有转行的就不匹配）</p><p>字符用的还是上述str1</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">d = re.<span class="built_in">compile</span>(<span class="string">r"，.*"</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> b.findall(str1):</span><br><span class="line">    <span class="built_in">print</span>(i)</span><br></pre></td></tr></tbody></table></figure><p>运行结果</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">，是红色的</span><br><span class="line">，是黄色的</span><br><span class="line">，是橘色的</span><br><span class="line">，是色</span><br><span class="line">，</span><br></pre></td></tr></tbody></table></figure><h2 id="②"><a href="#②" class="headerlink" title="②  .+"></a>②  .+</h2><p>. 与 + 连用， 匹配出现至少出现一次的字符（有转行的就不匹配）</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">d = re.<span class="built_in">compile</span>(<span class="string">r"，.+"</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> d.findall(str1):</span><br><span class="line">    <span class="built_in">print</span>(i)</span><br></pre></td></tr></tbody></table></figure><p>运行结果：</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">，是红色的</span><br><span class="line">，是黄色的</span><br><span class="line">，是橘色的</span><br><span class="line">，是色</span><br></pre></td></tr></tbody></table></figure><h2 id="③-贪婪模式与非贪婪"><a href="#③-贪婪模式与非贪婪" class="headerlink" title="③ 贪婪模式与非贪婪"></a>③ 贪婪模式与非贪婪</h2><p>上述介绍的.+ 和 .* 都是尽可能多的去匹配，如下效果：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">str3 = <span class="string">"&lt;html&gt;&lt;head&gt;&lt;title&gt;Title&lt;/title&gt;"</span></span><br><span class="line">f = re.<span class="built_in">compile</span>(<span class="string">r"&lt;.*&gt;"</span>)</span><br><span class="line"><span class="built_in">print</span>(f.findall(str3))</span><br></pre></td></tr></tbody></table></figure><p>运行结果：</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">['&lt;html&gt;&lt;head&gt;&lt;title&gt;Title&lt;/title&gt;']</span><br></pre></td></tr></tbody></table></figure><p>如果我们想要一个效果是这样的</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">['&lt;html&gt;', '&lt;head&gt;', '&lt;title&gt;', "&lt;/title&gt;"]</span><br></pre></td></tr></tbody></table></figure><p>那上述贪婪就无法满足我们，因为他们很贪婪，什么都想拿完，那如果我们贪婪前问问自己，是否需要呢？这样就可能是会解决一点点问题，所以我们问号小哥就出来了</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">str3 = <span class="string">"&lt;html&gt;&lt;head&gt;&lt;title&gt;Title&lt;/title&gt;"</span></span><br><span class="line">f = re.<span class="built_in">compile</span>(<span class="string">r"&lt;.*?&gt;"</span>)</span><br><span class="line"><span class="built_in">print</span>(f.findall(str3))</span><br></pre></td></tr></tbody></table></figure><p>运行结果：</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">['&lt;html&gt;', '&lt;head&gt;', '&lt;title&gt;', '&lt;/title&gt;']</span><br></pre></td></tr></tbody></table></figure><p>你看这样我们的问题是不是就解决了一点点了</p><h1 id="5-转义字符"><a href="#5-转义字符" class="headerlink" title="5. 转义字符 \"></a>5. 转义字符 \</h1><h4 id="①-表示特殊字符"><a href="#①-表示特殊字符" class="headerlink" title="① 表示特殊字符"></a>① 表示特殊字符</h4><p>现在我们这里有一串字符串</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">str</span> = <span class="string">"""</span></span><br><span class="line"><span class="string">苹果.是红色的</span></span><br><span class="line"><span class="string">香蕉.是黄色的</span></span><br><span class="line"><span class="string">梨子.是青色的</span></span><br><span class="line"><span class="string">橙子.是橘色的</span></span><br><span class="line"><span class="string">"""</span></span><br></pre></td></tr></tbody></table></figure><p>如果我们想匹配.前面(包括.)的字符，我们可以很轻松的想到用   .*.来匹配，我们就开开心心写了代码</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">g = re.<span class="built_in">compile</span>(<span class="string">r".*."</span>)</span><br><span class="line"><span class="built_in">print</span>(g.findall(<span class="built_in">str</span>))</span><br></pre></td></tr></tbody></table></figure><p>运行结果：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="string">'苹果.是红色的'</span>, <span class="string">'香蕉.是黄色的'</span>, <span class="string">'梨子.是青色的'</span>, <span class="string">'橙子.是橘色的'</span>]</span><br></pre></td></tr></tbody></table></figure><p>我淦！这个好像跟我们预期的不一样，我们现在来仔细看一看，原来我们两个 .都表示了任意字符，导致了我们最后结果是匹配成了全字符串，那我们要如何来进行改进呢？</p><p>这时候，就需要我们转义符(\)登场了，来帮助我们展示自己</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">h = re.<span class="built_in">compile</span>(<span class="string">r".*\."</span>)</span><br><span class="line"><span class="built_in">print</span>(h.findall(<span class="built_in">str</span>))</span><br></pre></td></tr></tbody></table></figure><p>运行结果：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="string">'苹果.'</span>, <span class="string">'香蕉.'</span>, <span class="string">'梨子.'</span>, <span class="string">'橙子.'</span>]</span><br></pre></td></tr></tbody></table></figure><p>当当，我们这样就可以了</p><h4 id="②-组合技-d-D-s-S-w-W"><a href="#②-组合技-d-D-s-S-w-W" class="headerlink" title="② 组合技 \d, \D, \s, \S, \w, \W"></a>② 组合技 \d, \D, \s, \S, \w, \W</h4><p>\d  匹配0~9的任意数字</p><p>\D 匹配不是0~9的数字字符</p><p>\s  匹配任意一个空白字符，比如说\t, \n, \r, \f, \v</p><p>\S 匹配任意一个非空白字符</p><p>\w 匹配任意一个文字字符(要分模式，后面细说)</p><p>\W 匹配任意一个非文字字符</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">str2 = <span class="string">"""</span></span><br><span class="line"><span class="string">石东东， 18200182978， 98</span></span><br><span class="line"><span class="string">李珂梦， 18180315684， 20</span></span><br><span class="line"><span class="string">不知道， 12483856826， 30</span></span><br><span class="line"><span class="string">"""</span></span><br></pre></td></tr></tbody></table></figure><p>1、我们来小试牛刀，先来匹配一个电话号码</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">i = re.<span class="built_in">compile</span>(<span class="string">r"\d{11}"</span>)</span><br><span class="line"><span class="built_in">print</span>(i.findall(str2))</span><br></pre></td></tr></tbody></table></figure><p>运行结果</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="string">'18200182978'</span>, <span class="string">'18180315684'</span>, <span class="string">'12483856826'</span>]</span><br></pre></td></tr></tbody></table></figure><p>我们这上面的{}这个表示的意思就是说，{x,y}至少匹配连续的是x长，且至多的长度位y长。这里大家可能会出一点错在用{}的时候，大家可以实际体验一下，我在后面会说一下。</p><p>2、求完电话号码了，咱们也需要拿到名字，这时候\D就有用了</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">j = re.<span class="built_in">compile</span>(<span class="string">r"\D{4}"</span>)</span><br><span class="line"><span class="built_in">print</span>(j.findall(str2))</span><br></pre></td></tr></tbody></table></figure><p>运行结果：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="string">'\n石东东'</span>, <span class="string">'\n李珂梦'</span>, <span class="string">'\n不知道'</span>]</span><br></pre></td></tr></tbody></table></figure><p>这样我们虽然好像匹配到了，但是前面又有一点点多余的字符，要怎么办呢，这时候我们就可以看看\w</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">k = re.<span class="built_in">compile</span>(<span class="string">r"\w{2,4},"</span>)</span><br><span class="line"><span class="built_in">print</span>(k.findall(str2))</span><br></pre></td></tr></tbody></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;1-点&quot;&gt;&lt;a href=&quot;#1-点&quot; class=&quot;headerlink&quot; title=&quot;1. 点.&quot;&gt;&lt;/a&gt;1. 点.&lt;/h1&gt;&lt;p&gt;匹配一个任意字符，不匹配转行符&lt;/p&gt;
&lt;p&gt;以下述为例&lt;/p&gt;
&lt;figure class=&quot;highlight pyth</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://sheepelectronic.github.io/post/4a17b156.html"/>
    <id>http://sheepelectronic.github.io/post/4a17b156.html</id>
    <published>2022-10-25T12:30:14.412Z</published>
    <updated>2022-10-27T01:43:39.579Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></tbody></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></tbody></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></tbody></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></tbody></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for</summary>
      
    
    
    
    
  </entry>
  
</feed>
